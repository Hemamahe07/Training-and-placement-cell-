#include <stdio.h>
#include <stdbool.h>
#include <string.h>

#define MAX 100

// Stack structure
typedef struct {
    char arr[MAX];
    int top;
} Stack;

// Stack operations
void push(Stack *s, char ch) {
    if (s->top < MAX - 1) {
        s->arr[++(s->top)] = ch;
    }
}

char pop(Stack *s) {
    if (s->top >= 0) {
        return s->arr[(s->top)--];
    }
    return '\0'; // Return null character if stack is empty
}

char peek(Stack *s) {
    if (s->top >= 0) {
        return s->arr[s->top];
    }
    return '\0';
}

// Function to check if parentheses are valid
bool isValidParentheses(char *str) {
    Stack stack;
    stack.top = -1;

    for (int i = 0; str[i] != '\0'; i++) {
        char ch = str[i];

        // Push opening brackets onto the stack
        if (ch == '(' || ch == '{' || ch == '[') {
            push(&stack, ch);
        } 
        // Check closing brackets
        else if (ch == ')' || ch == '}' || ch == ']') {
            char top = peek(&stack);
            if ((ch == ')' && top == '(') ||
                (ch == '}' && top == '{') ||
                (ch == ']' && top == '[')) {
                pop(&stack); // Matching pair found, pop the stack
            } else {
                return false; // Mismatch or stack empty
            }
        }
    }

    return stack.top == -1; // Stack should be empty for a valid string
}

int main() {
    char str[MAX];
    
    printf("Enter a string of parentheses: ");
    scanf("%s", str);

    if (isValidParentheses(str)) {
        printf("Valid Parentheses\n");
    } else {
        printf("Invalid Parentheses\n");
    }

    return 0;
}
